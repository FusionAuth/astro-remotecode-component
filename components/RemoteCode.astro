---
/**
  * Remote code fetcher and syntax highlighter via the Astro Code component.
  */

import { Code } from 'astro/components';

export interface Props {
  /**
   * Url to fetch code from.  Also allows selecting specific line(s) of code with
   * the Github line syntax.
   * E.g., https://raw.githubusercontent.com/FusionAuth/fusionauth-example-client-libraries/main/ruby/Gemfile#L3
   */
  url: string;

  /**
   * The language of your code.
   * Supports all languages listed here: https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages
   *
   * @default "plaintext"
   */
  lang?: string;

  /**
   * Optional tags marking beginning and end of content to include
   * Loosely based on https://docs.asciidoctor.org/asciidoc/latest/directives/include-tagged-regions/
   * Note: Currently only supports one set of tags.
   */
  tags?: string;
}

const { url, lang = 'plaintext', tags, ...rest } = Astro.props;

const extractCode = async (url: string, tags: string): Promise<string> => {
  const remoteResponse = await fetch(url);
  const remoteCode = await remoteResponse.text();

  if (tags !== '') {
    return selectTagged(remoteCode, tags);
  }

  const matchLines = url.match(/.*#L(\d+)(-L(\d+))?$/);
  if ((matchLines !== null) && (matchLines.length > 0)) {
    return selectLines(remoteCode, matchLines[1] as number, matchLines[3] as number);
  }
  return remoteCode.trim();
};

let remoteSelectedCode = 'not available';
try {
  remoteSelectedCode = await extractCode(url, tags);
} catch (e) {
  console.log('Couldn\'t retrieve remote code', e);
}

function selectTagged (content: string, tags: string): string {
  const lines = content.split('\n');

  const startLine = lines.findIndex((line) => line.includes(`tag::${tags}`));
  const endLine = lines.findIndex((line) => line.includes(`end::${tags}`));
  return lines.slice(startLine + 1, endLine)
    .join('\n')
    .replace(/\s+$/g, '');
}

function selectLines (content: string, lineNum: number, lineEnd: number): string {
  const lines = content.split('\n');
  if ((lineNum > 0) && (lineEnd > 0)) {
    return lines.slice(lineNum - 1, lineEnd - 1).join('\n');
  }

  if (lineNum > 0) {
    return lines[lineNum - 1];
  }

  return content;
}
---
<Code code={remoteSelectedCode} lang={lang} {...rest}/>
